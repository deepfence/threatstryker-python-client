from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.model_basic_node import ModelBasicNode


T = TypeVar("T", bound="ModelVulnerabilityRule")


@_attrs_define
class ModelVulnerabilityRule:
    """
    Attributes:
        cisa_kev (bool):
        cve_attack_vectors (Union[None, list[str]]):
        cve_cvss_scores (Union[None, list[Any]]):
        cve_descriptions (Union[None, list[str]]):
        cve_fixed_ins (Union[None, list[str]]):
        cve_id (str):
        cve_links (Union[None, list[str]]):
        cve_overall_scores (Union[None, list[Any]]):
        cve_severities (Union[None, list[str]]):
        cve_types (Union[None, list[str]]):
        epss_score (float):
        exploit_pocs (Union[None, list[str]]):
        masked (bool):
        namespaces (Union[None, list[str]]):
        node_id (str):
        package_names (Union[None, list[str]]):
        parsed_attack_vectors (Union[None, list[str]]):
        updated_at (int):
        urls (Union[None, list[str]]):
        resources (Union[None, Unset, list['ModelBasicNode']]):
    """

    cisa_kev: bool
    cve_attack_vectors: Union[None, list[str]]
    cve_cvss_scores: Union[None, list[Any]]
    cve_descriptions: Union[None, list[str]]
    cve_fixed_ins: Union[None, list[str]]
    cve_id: str
    cve_links: Union[None, list[str]]
    cve_overall_scores: Union[None, list[Any]]
    cve_severities: Union[None, list[str]]
    cve_types: Union[None, list[str]]
    epss_score: float
    exploit_pocs: Union[None, list[str]]
    masked: bool
    namespaces: Union[None, list[str]]
    node_id: str
    package_names: Union[None, list[str]]
    parsed_attack_vectors: Union[None, list[str]]
    updated_at: int
    urls: Union[None, list[str]]
    resources: Union[None, Unset, list["ModelBasicNode"]] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        cisa_kev = self.cisa_kev

        cve_attack_vectors: Union[None, list[str]]
        if isinstance(self.cve_attack_vectors, list):
            cve_attack_vectors = self.cve_attack_vectors

        else:
            cve_attack_vectors = self.cve_attack_vectors

        cve_cvss_scores: Union[None, list[Any]]
        if isinstance(self.cve_cvss_scores, list):
            cve_cvss_scores = self.cve_cvss_scores

        else:
            cve_cvss_scores = self.cve_cvss_scores

        cve_descriptions: Union[None, list[str]]
        if isinstance(self.cve_descriptions, list):
            cve_descriptions = self.cve_descriptions

        else:
            cve_descriptions = self.cve_descriptions

        cve_fixed_ins: Union[None, list[str]]
        if isinstance(self.cve_fixed_ins, list):
            cve_fixed_ins = self.cve_fixed_ins

        else:
            cve_fixed_ins = self.cve_fixed_ins

        cve_id = self.cve_id

        cve_links: Union[None, list[str]]
        if isinstance(self.cve_links, list):
            cve_links = self.cve_links

        else:
            cve_links = self.cve_links

        cve_overall_scores: Union[None, list[Any]]
        if isinstance(self.cve_overall_scores, list):
            cve_overall_scores = self.cve_overall_scores

        else:
            cve_overall_scores = self.cve_overall_scores

        cve_severities: Union[None, list[str]]
        if isinstance(self.cve_severities, list):
            cve_severities = self.cve_severities

        else:
            cve_severities = self.cve_severities

        cve_types: Union[None, list[str]]
        if isinstance(self.cve_types, list):
            cve_types = self.cve_types

        else:
            cve_types = self.cve_types

        epss_score = self.epss_score

        exploit_pocs: Union[None, list[str]]
        if isinstance(self.exploit_pocs, list):
            exploit_pocs = self.exploit_pocs

        else:
            exploit_pocs = self.exploit_pocs

        masked = self.masked

        namespaces: Union[None, list[str]]
        if isinstance(self.namespaces, list):
            namespaces = self.namespaces

        else:
            namespaces = self.namespaces

        node_id = self.node_id

        package_names: Union[None, list[str]]
        if isinstance(self.package_names, list):
            package_names = self.package_names

        else:
            package_names = self.package_names

        parsed_attack_vectors: Union[None, list[str]]
        if isinstance(self.parsed_attack_vectors, list):
            parsed_attack_vectors = self.parsed_attack_vectors

        else:
            parsed_attack_vectors = self.parsed_attack_vectors

        updated_at = self.updated_at

        urls: Union[None, list[str]]
        if isinstance(self.urls, list):
            urls = self.urls

        else:
            urls = self.urls

        resources: Union[None, Unset, list[dict[str, Any]]]
        if isinstance(self.resources, Unset):
            resources = UNSET
        elif isinstance(self.resources, list):
            resources = []
            for resources_type_0_item_data in self.resources:
                resources_type_0_item = resources_type_0_item_data.to_dict()
                resources.append(resources_type_0_item)

        else:
            resources = self.resources

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "cisa_kev": cisa_kev,
                "cve_attack_vectors": cve_attack_vectors,
                "cve_cvss_scores": cve_cvss_scores,
                "cve_descriptions": cve_descriptions,
                "cve_fixed_ins": cve_fixed_ins,
                "cve_id": cve_id,
                "cve_links": cve_links,
                "cve_overall_scores": cve_overall_scores,
                "cve_severities": cve_severities,
                "cve_types": cve_types,
                "epss_score": epss_score,
                "exploit_pocs": exploit_pocs,
                "masked": masked,
                "namespaces": namespaces,
                "node_id": node_id,
                "package_names": package_names,
                "parsed_attack_vectors": parsed_attack_vectors,
                "updated_at": updated_at,
                "urls": urls,
            }
        )
        if resources is not UNSET:
            field_dict["resources"] = resources

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.model_basic_node import ModelBasicNode

        d = dict(src_dict)
        cisa_kev = d.pop("cisa_kev")

        def _parse_cve_attack_vectors(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                cve_attack_vectors_type_0 = cast(list[str], data)

                return cve_attack_vectors_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        cve_attack_vectors = _parse_cve_attack_vectors(d.pop("cve_attack_vectors"))

        def _parse_cve_cvss_scores(data: object) -> Union[None, list[Any]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                cve_cvss_scores_type_0 = cast(list[Any], data)

                return cve_cvss_scores_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[Any]], data)

        cve_cvss_scores = _parse_cve_cvss_scores(d.pop("cve_cvss_scores"))

        def _parse_cve_descriptions(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                cve_descriptions_type_0 = cast(list[str], data)

                return cve_descriptions_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        cve_descriptions = _parse_cve_descriptions(d.pop("cve_descriptions"))

        def _parse_cve_fixed_ins(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                cve_fixed_ins_type_0 = cast(list[str], data)

                return cve_fixed_ins_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        cve_fixed_ins = _parse_cve_fixed_ins(d.pop("cve_fixed_ins"))

        cve_id = d.pop("cve_id")

        def _parse_cve_links(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                cve_links_type_0 = cast(list[str], data)

                return cve_links_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        cve_links = _parse_cve_links(d.pop("cve_links"))

        def _parse_cve_overall_scores(data: object) -> Union[None, list[Any]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                cve_overall_scores_type_0 = cast(list[Any], data)

                return cve_overall_scores_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[Any]], data)

        cve_overall_scores = _parse_cve_overall_scores(d.pop("cve_overall_scores"))

        def _parse_cve_severities(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                cve_severities_type_0 = cast(list[str], data)

                return cve_severities_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        cve_severities = _parse_cve_severities(d.pop("cve_severities"))

        def _parse_cve_types(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                cve_types_type_0 = cast(list[str], data)

                return cve_types_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        cve_types = _parse_cve_types(d.pop("cve_types"))

        epss_score = d.pop("epss_score")

        def _parse_exploit_pocs(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                exploit_pocs_type_0 = cast(list[str], data)

                return exploit_pocs_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        exploit_pocs = _parse_exploit_pocs(d.pop("exploit_pocs"))

        masked = d.pop("masked")

        def _parse_namespaces(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                namespaces_type_0 = cast(list[str], data)

                return namespaces_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        namespaces = _parse_namespaces(d.pop("namespaces"))

        node_id = d.pop("node_id")

        def _parse_package_names(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                package_names_type_0 = cast(list[str], data)

                return package_names_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        package_names = _parse_package_names(d.pop("package_names"))

        def _parse_parsed_attack_vectors(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                parsed_attack_vectors_type_0 = cast(list[str], data)

                return parsed_attack_vectors_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        parsed_attack_vectors = _parse_parsed_attack_vectors(d.pop("parsed_attack_vectors"))

        updated_at = d.pop("updated_at")

        def _parse_urls(data: object) -> Union[None, list[str]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                urls_type_0 = cast(list[str], data)

                return urls_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[str]], data)

        urls = _parse_urls(d.pop("urls"))

        def _parse_resources(data: object) -> Union[None, Unset, list["ModelBasicNode"]]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                resources_type_0 = []
                _resources_type_0 = data
                for resources_type_0_item_data in _resources_type_0:
                    resources_type_0_item = ModelBasicNode.from_dict(resources_type_0_item_data)

                    resources_type_0.append(resources_type_0_item)

                return resources_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, Unset, list["ModelBasicNode"]], data)

        resources = _parse_resources(d.pop("resources", UNSET))

        model_vulnerability_rule = cls(
            cisa_kev=cisa_kev,
            cve_attack_vectors=cve_attack_vectors,
            cve_cvss_scores=cve_cvss_scores,
            cve_descriptions=cve_descriptions,
            cve_fixed_ins=cve_fixed_ins,
            cve_id=cve_id,
            cve_links=cve_links,
            cve_overall_scores=cve_overall_scores,
            cve_severities=cve_severities,
            cve_types=cve_types,
            epss_score=epss_score,
            exploit_pocs=exploit_pocs,
            masked=masked,
            namespaces=namespaces,
            node_id=node_id,
            package_names=package_names,
            parsed_attack_vectors=parsed_attack_vectors,
            updated_at=updated_at,
            urls=urls,
            resources=resources,
        )

        model_vulnerability_rule.additional_properties = d
        return model_vulnerability_rule

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
