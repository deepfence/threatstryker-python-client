from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.model_vulnerability_cve_severity import ModelVulnerabilityCveSeverity
from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.model_basic_node import ModelBasicNode


T = TypeVar("T", bound="ModelVulnerability")


@_attrs_define
class ModelVulnerability:
    """
    Attributes:
        cisa_kev (bool):
        cve_attack_vector (str):
        cve_caused_by_package (str):
        cve_caused_by_package_path (str):
        cve_container_layer (str):
        cve_cvss_score (float):
        cve_description (str):
        cve_fixed_in (str):
        cve_id (str):
        cve_link (str):
        cve_overall_score (float):
        cve_severity (ModelVulnerabilityCveSeverity):
        cve_type (str):
        epss_score (float):
        exploit_poc (str):
        has_live_connection (bool):
        masked (bool):
        namespace (str):
        node_id (str):
        parsed_attack_vector (str):
        rule_id (str):
        updated_at (int):
        urls (Union[None, list[Any]]):
        exploitability_score (Union[Unset, int]):
        max_exploitability_score (Union[Unset, int]):
        resources (Union[None, Unset, list['ModelBasicNode']]):
    """

    cisa_kev: bool
    cve_attack_vector: str
    cve_caused_by_package: str
    cve_caused_by_package_path: str
    cve_container_layer: str
    cve_cvss_score: float
    cve_description: str
    cve_fixed_in: str
    cve_id: str
    cve_link: str
    cve_overall_score: float
    cve_severity: ModelVulnerabilityCveSeverity
    cve_type: str
    epss_score: float
    exploit_poc: str
    has_live_connection: bool
    masked: bool
    namespace: str
    node_id: str
    parsed_attack_vector: str
    rule_id: str
    updated_at: int
    urls: Union[None, list[Any]]
    exploitability_score: Union[Unset, int] = UNSET
    max_exploitability_score: Union[Unset, int] = UNSET
    resources: Union[None, Unset, list["ModelBasicNode"]] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        cisa_kev = self.cisa_kev

        cve_attack_vector = self.cve_attack_vector

        cve_caused_by_package = self.cve_caused_by_package

        cve_caused_by_package_path = self.cve_caused_by_package_path

        cve_container_layer = self.cve_container_layer

        cve_cvss_score = self.cve_cvss_score

        cve_description = self.cve_description

        cve_fixed_in = self.cve_fixed_in

        cve_id = self.cve_id

        cve_link = self.cve_link

        cve_overall_score = self.cve_overall_score

        cve_severity = self.cve_severity.value

        cve_type = self.cve_type

        epss_score = self.epss_score

        exploit_poc = self.exploit_poc

        has_live_connection = self.has_live_connection

        masked = self.masked

        namespace = self.namespace

        node_id = self.node_id

        parsed_attack_vector = self.parsed_attack_vector

        rule_id = self.rule_id

        updated_at = self.updated_at

        urls: Union[None, list[Any]]
        if isinstance(self.urls, list):
            urls = self.urls

        else:
            urls = self.urls

        exploitability_score = self.exploitability_score

        max_exploitability_score = self.max_exploitability_score

        resources: Union[None, Unset, list[dict[str, Any]]]
        if isinstance(self.resources, Unset):
            resources = UNSET
        elif isinstance(self.resources, list):
            resources = []
            for resources_type_0_item_data in self.resources:
                resources_type_0_item = resources_type_0_item_data.to_dict()
                resources.append(resources_type_0_item)

        else:
            resources = self.resources

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "cisa_kev": cisa_kev,
                "cve_attack_vector": cve_attack_vector,
                "cve_caused_by_package": cve_caused_by_package,
                "cve_caused_by_package_path": cve_caused_by_package_path,
                "cve_container_layer": cve_container_layer,
                "cve_cvss_score": cve_cvss_score,
                "cve_description": cve_description,
                "cve_fixed_in": cve_fixed_in,
                "cve_id": cve_id,
                "cve_link": cve_link,
                "cve_overall_score": cve_overall_score,
                "cve_severity": cve_severity,
                "cve_type": cve_type,
                "epss_score": epss_score,
                "exploit_poc": exploit_poc,
                "has_live_connection": has_live_connection,
                "masked": masked,
                "namespace": namespace,
                "node_id": node_id,
                "parsed_attack_vector": parsed_attack_vector,
                "rule_id": rule_id,
                "updated_at": updated_at,
                "urls": urls,
            }
        )
        if exploitability_score is not UNSET:
            field_dict["exploitability_score"] = exploitability_score
        if max_exploitability_score is not UNSET:
            field_dict["max_exploitability_score"] = max_exploitability_score
        if resources is not UNSET:
            field_dict["resources"] = resources

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.model_basic_node import ModelBasicNode

        d = dict(src_dict)
        cisa_kev = d.pop("cisa_kev")

        cve_attack_vector = d.pop("cve_attack_vector")

        cve_caused_by_package = d.pop("cve_caused_by_package")

        cve_caused_by_package_path = d.pop("cve_caused_by_package_path")

        cve_container_layer = d.pop("cve_container_layer")

        cve_cvss_score = d.pop("cve_cvss_score")

        cve_description = d.pop("cve_description")

        cve_fixed_in = d.pop("cve_fixed_in")

        cve_id = d.pop("cve_id")

        cve_link = d.pop("cve_link")

        cve_overall_score = d.pop("cve_overall_score")

        cve_severity = ModelVulnerabilityCveSeverity(d.pop("cve_severity"))

        cve_type = d.pop("cve_type")

        epss_score = d.pop("epss_score")

        exploit_poc = d.pop("exploit_poc")

        has_live_connection = d.pop("has_live_connection")

        masked = d.pop("masked")

        namespace = d.pop("namespace")

        node_id = d.pop("node_id")

        parsed_attack_vector = d.pop("parsed_attack_vector")

        rule_id = d.pop("rule_id")

        updated_at = d.pop("updated_at")

        def _parse_urls(data: object) -> Union[None, list[Any]]:
            if data is None:
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                urls_type_0 = cast(list[Any], data)

                return urls_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, list[Any]], data)

        urls = _parse_urls(d.pop("urls"))

        exploitability_score = d.pop("exploitability_score", UNSET)

        max_exploitability_score = d.pop("max_exploitability_score", UNSET)

        def _parse_resources(data: object) -> Union[None, Unset, list["ModelBasicNode"]]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, list):
                    raise TypeError()
                resources_type_0 = []
                _resources_type_0 = data
                for resources_type_0_item_data in _resources_type_0:
                    resources_type_0_item = ModelBasicNode.from_dict(resources_type_0_item_data)

                    resources_type_0.append(resources_type_0_item)

                return resources_type_0
            except:  # noqa: E722
                pass
            return cast(Union[None, Unset, list["ModelBasicNode"]], data)

        resources = _parse_resources(d.pop("resources", UNSET))

        model_vulnerability = cls(
            cisa_kev=cisa_kev,
            cve_attack_vector=cve_attack_vector,
            cve_caused_by_package=cve_caused_by_package,
            cve_caused_by_package_path=cve_caused_by_package_path,
            cve_container_layer=cve_container_layer,
            cve_cvss_score=cve_cvss_score,
            cve_description=cve_description,
            cve_fixed_in=cve_fixed_in,
            cve_id=cve_id,
            cve_link=cve_link,
            cve_overall_score=cve_overall_score,
            cve_severity=cve_severity,
            cve_type=cve_type,
            epss_score=epss_score,
            exploit_poc=exploit_poc,
            has_live_connection=has_live_connection,
            masked=masked,
            namespace=namespace,
            node_id=node_id,
            parsed_attack_vector=parsed_attack_vector,
            rule_id=rule_id,
            updated_at=updated_at,
            urls=urls,
            exploitability_score=exploitability_score,
            max_exploitability_score=max_exploitability_score,
            resources=resources,
        )

        model_vulnerability.additional_properties = d
        return model_vulnerability

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
